Docker Day 3:
=============

1.Docker Volume:
================

-Launch a docker server using ubuntu os and install docker.

-mkdir developer 

-launch a container with volume


1.1 SYNC
========

To avoid the direct access to the container we are going to create a folder in docker server and enable the sync between container and docker server.(Sync a path)

cd ~
mkdir developer

docker run -itd --name developeraccess -p "8010:80" -v "/root/developer:/usr/local/apache2/htdocs" httpd

docker images
docker ps -a

Login to the container

docker exec <container id> /bin/bash

cd htdocs/ (No index file available)

apt-get update
apt-get install vim
vi index.html

or 

echo "This is docker session 3" > index.html

cat index.html

exit

{check the sync in docker server also do the change in docker server check inside the container}


1.2 Mount
==========
It is used to sync the multiple container from your docker server like EFS in AWS.

docker volume ls
docker volume create myvolume
docker volume ls
docker inspect myvolume {you can find the common mount point}

cd <mount path upto _data>
docker run -itd --name vehicle -p "8020:80" --mount source=myvolume,destination=/usr/local/apache2/htdocs httpd

docker images

docker run -itd --name personal -p "8030:80" --mount source=myvolume,destination=/usr/local/apache2/htdocs httpd

docker run -itd --name home -p "8040:80" --mount source=myvolume,destination=/usr/local/apache2/htdocs httpd

docker container ls

Now try to access the container in browser.

docker exec -it <any container id> /bin/bash

apt-get install vim -y

cd htdocs/
vi index.html -> i -> docker mount test


2.Container Access through SSH protocol:
===============================

User can directly able to login to the container without login the docker server using a port with credentials.This can be achieved through openssh using a dockerfile.
---------------------------------
mkdir mydocker
cd mydocker/
vi Dockerfile

FROM ubuntu:16.04
MAINTAINER Udhay
RUN apt-get update
RUN apt-get install wget openssh-server -y
RUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
RUN echo 'root:root123' | chpasswd
RUN mkdir /var/run/sshd
CMD ["/usr/sbin/sshd", "-D"]
EXPOSE 22

------------------------------------------------
sed-->to find & Replace
-i--> to avoid case sensitive
's--> search
--------------------

docker build -t credentialsimage .
docker images
docker run -itd --name logadmin -p "2323:22" credentialsimage

docker ps -a

-open putty
-IP as a hostname and Port will be 2323
-Click open
-Login as : root , root123

3.Docker Network:
=================

cd ~
docker network ls

-Bridge
-host
-null

docker inspect <N/w ID for bridge> (common network for all the containers)


4.Docker compose:
=================

Run multiple containers at a same time.

sudo curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose

cd /usr/local/bin/
ls -lrt
cd ~
sudo chmod +x /usr/local/bin/docker-compose

docker-compose --version

mkdir compose

cd compose

vi docker-compose.yml

version: "3"
services: #global value
   database:
       image: mysql:5.7
       volumes:
       - ./data:/var/lib/mysql
       environment:
           MYSQL_ROOT_PASSWORD: somewordpress
           MYSQL_DATABASE: wordpress
           MYSQL_USER: wordpress
           MYSQL_PASSWORD: wordpress
   wordpress:
        image: wordpress
        depends_on:
        - database
        ports:
        - "8000:80"
        restart: always
        environment:
            WORDPRESS_DB_HOST: database:3306
            WORDPRESS_DB_USER: wordpress
            WORDPRESS_DB_PASSWORD: wordpress
            WORDPRESS_DB_NAME: wordpress


docker-compose up -d docker-compose.yml    ----> To Run Docker Compose File


=======================================================================================

Rename a container:
====================

docker rename <container name> <newname>




